/* 	-with single input
	-4 relations
	-one pass - single job
*/

import java.lang.*;
import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.ArrayList;
import java.io.IOException;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;import org.apache.hadoop.io.*;

import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.*;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;


public class extmultiway
{
	
	
	
    public static class joinsMap extends Mapper<LongWritable,Text,Text,Text>{

	
	private  static Text outKey=new Text();
	private  static Text outValue=new Text();
	// 5 by 5 by 5 hash table/buckets
	private static int k1=5; // h(x2) x-axis, i-iterator
	private static int k2=5; // h(x3) y-axis, j-iterator
	private static int k3=5; // h(x4) z-axis, k-iterator
	

	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException{

	
	
 	String line = value.toString();
	

        StringTokenizer st = new StringTokenizer(line);
	      
	String token="";
	String tempKey="";
	String tempVal="";
		
		
	      
	      // checking next token
	     while (st.hasMoreTokens()){
	    	token= st.nextToken();
	    	String source=token.substring(0,token.indexOf("("));
		String x1="";
		String x2="";
		String x3="";
		String x4="";
		String x5="";
		String hashed="";
		
		
	    	  if (source.equals("A1")){
			x1=token.substring(token.indexOf("(")+1,token.indexOf(",")); // A1(x1,x2). 
			x2=token.substring(token.indexOf(",")+1,token.indexOf(")")); 
			hashed=hashFunc(x2);
			// distribute to all variants of x3,x4 ; h(x2),*,*
			for (int k=0;k<k3;k++){
				for (int j=0;j<k2;j++){
					tempKey=hashed+","+j+","+k;
					outKey.set(tempKey);
					tempVal="A1"+","+x1+","+x2;
					outValue.set(tempVal);	
	    	  		 	context.write(outKey, outValue);//**** 
					}//end for j
	    	 	 } // end for i 
		} else if (source.equals("A2")){
			x2=token.substring(token.indexOf("(")+1,token.indexOf(","));  
			x3=token.substring(token.indexOf(",")+1,token.indexOf(")")); 
			String hashed1=hashFunc(x2);
			String hashed2=hashFunc(x3);
			// distribute  h(x2),h(x3),*
			for (int k=0;k<k3;k++){
				tempKey=hashed1+","+hashed2+","+k;
				outKey.set(tempKey);
					tempVal="A2"+","+x2+","+x3;
					outValue.set(tempVal);	
	    	  		 	context.write(outKey, outValue);//**** 
					
	    	 	 } // end for k
				}//end if
			else if (source.equals("A3")){
			x3=token.substring(token.indexOf("(")+1,token.indexOf(",")); // A3(x3,x4). 
			x4=token.substring(token.indexOf(",")+1,token.indexOf(")")); 
			String hashed2=hashFunc(x3);
			String hashed3=hashFunc(x4);
			// distribute  *,h(x3),h(x4)
			for (int i=0;i<k1;i++){
				tempKey=i+","+hashed2+","+hashed3;
				outKey.set(tempKey);
					tempVal="A3"+","+x3+","+x4;
					outValue.set(tempVal);	
	    	  		 	context.write(outKey, outValue);//**** 
					
	    	 	 } // end for i
				}//end if
			else if (source.equals("A4")){
			x4=token.substring(token.indexOf("(")+1,token.indexOf(",")); // A3(x3,x4). 
			x5=token.substring(token.indexOf(",")+1,token.indexOf(")")); 
			String hashed4=hashFunc(x4);

			// distribute  *,*,h(x4)
			for (int i=0;i<k1;i++){
				for (int j=0;j<k2;j++){
					tempKey=i+","+j+","+hashed4;
					outKey.set(tempKey);
					tempVal="A4"+","+x4+","+x5;
					outValue.set(tempVal);	
	    	  		 	context.write(outKey, outValue);//**** 
					} //end for j
	    	 	 } // end for i
				}//end if
		
	    	source=null;
		x1=null;
		x2=null;
		x3=null;
		x4=null;
		x5=null;

	    	 
	     } // end while , checking tokens.
		

               
			
   
 }// end map method
public static String hashFunc(String attribute){
		int num=Integer.parseInt(attribute);
		int func= num % k1;
		
		return Integer.toString(func);
		
	} // end hashFunc

}//end map class
  
public static class joinsReduce extends Reducer<Text,Text,NullWritable,Text>{

	//private static Text outVal=new Text();

public void reduce (Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {

	String newR="";
	List<String[]> A1 = new ArrayList<String[]>();
	List<String[]> A2 = new ArrayList<String[]>();
	List<String[]> A3 = new ArrayList<String[]>();
	List<String[]> A4 = new ArrayList<String[]>();
	String line="";
	String source="";
	int i=0;

	for (Text value : values){
	line=value.toString();
	String[] parts=new String[2];
	
	source=line.substring(0,line.indexOf(","));
	// everything before the first comma. 
	parts[0]=line.substring(line.indexOf(",")+1,line.lastIndexOf(","));
	// between first comma and last.
	parts[1]=line.substring(line.lastIndexOf(",")+1);
	// after last comma	
	
	//seperate components comming from A1 , A2 , A3 , A4 (other/else).
	
		if (source.equals("A1")){
			A1.add(parts);				
			}  else if (source.equals("A2")) {
				A2.add(parts);				
				} else if (source.equals("A3")){
					A3.add(parts);
					} else if (source.equals("A4")){
						A4.add(parts);

						}//end if/else  
	


	source=null;
	line=null;
	parts=null;
	} // end for loop for iteration over values.

	

	//join tuples
	 for (String[] listA1: A1){

		for (String[] listA2: A2){ 
		if (listA1[1].equals(listA2[0])){ // if A1.x2=A2.x2 where A1(x1,x2) and A2(x2,x3)
			for (String[] listA3: A3){
			if (listA2[1].equals(listA3[0])){  // if A2.x3=A3.x3 
				for (String[] listA4: A4){
				if (listA3[1].equals(listA4[0])){
		newR="f("+listA1[0]+","+listA2[0]+","+listA2[1]+","+listA3[1]+","+listA4[1]+")";
		context.write(NullWritable.get(),new Text(newR)); // notice a null key value.
						} //end inner if
					} // end for A4

					} // end if
				} // end for A3
			} //end if
		} //end for A2
	} //end for A1
		
		
	
	
	
	}//end method
	
	
	
	
}//end class

	public static void main( String[] args ) throws Exception {




     Configuration conf1 = new Configuration();
         
      
	 Job job1 = new Job(conf1, "job1");
	
	job1.setJarByClass(extmultiway.class);
	
	//job1.setNumReduceTasks(0);//***
     
     job1.setOutputKeyClass(Text.class);
     job1.setOutputValueClass(Text.class);
         
     job1.setMapperClass(joinsMap.class);
     job1.setReducerClass(joinsReduce.class);
         
     job1.setInputFormatClass(TextInputFormat.class);
     job1.setOutputFormatClass(TextOutputFormat.class);


	// inputs to  map.
        FileInputFormat.addInputPath(job1, new Path("in4/normFile.txt"));   
  	
     // single output from reducer.
     FileOutputFormat.setOutputPath(job1, new Path("outHere"));
         
     job1.waitForCompletion(true);


} //end main
}
